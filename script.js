// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–´–†–ê–í–ù–ò–í–ê–ù–ò–Ø –í–´–°–û–¢–´ –®–ê–ü–ö–ò
function normalizeHeaderHeight() {
    const header = document.querySelector('.header');
    const hero = document.querySelector('.hero');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (header) {
        header.style.height = '70px';
        header.style.display = 'flex';
        header.style.alignItems = 'center';
        header.style.position = 'fixed';
        header.style.top = '0';
        header.style.width = '100%';
        header.style.zIndex = '1000';
    }
    
    // –î–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥ —à–∞–ø–∫–æ–π
    const mainSections = document.querySelectorAll('.hero, .features, .archive-preview, .archive-main');
    mainSections.forEach(section => {
        if (section) {
            section.style.marginTop = '70px';
            section.style.paddingTop = section.classList.contains('hero') ? '140px' : '80px';
        }
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è hero —Å–µ–∫—Ü–∏–∏
    if (hero) {
        hero.style.marginTop = '70px';
        hero.style.paddingTop = '140px';
    }
}

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –°–¢–†–ê–ù–ò–¶
function checkPageExistence(url) {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞:', url);
    return true;
}

// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ö–ê–ó–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
function showNotification(message, type = 'info') {
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

function initCommunityPages() {
    loadForumTopics();
    loadProjects();
    loadExperts();
    loadBlogPosts();
}

function loadForumTopics() {
    const topicsContainer = document.querySelector('.forum-topics');
    if (!topicsContainer) return;
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º —Ñ–æ—Ä—É–º–∞
    const topics = [
        {
            id: 1,
            title: "–ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø—Ä–æ–º–¥–∏–∑–∞–π–Ω–µ",
            description: "–û–±—Å—É–∂–¥–∞–µ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ",
            author: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            replies: 45,
            lastActivity: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
        },
        {
            id: 2,
            title: "–ü—Ä–æ–±–ª–µ–º—ã –¥–∏–∑–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", 
            description: "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≤—É–∑–∞—Ö?",
            author: "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
            replies: 28,
            lastActivity: "5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
        }
    ];
    
    topics.forEach(topic => {
        const topicElement = document.createElement('div');
        topicElement.className = 'topic-card';
        topicElement.innerHTML = `
            <div class="topic-header">
                <h3>${topic.title}</h3>
                <span class="topic-stats">üí¨ ${topic.replies}</span>
            </div>
            <p>${topic.description}</p>
            <div class="topic-meta">
                <span>üë§ ${topic.author}</span>
                <span>üìÖ ${topic.lastActivity}</span>
            </div>
        `;
        topicElement.addEventListener('click', () => {
            window.location.href = `forum-discussion.html?id=${topic.id}`;
        });
        topicsContainer.appendChild(topicElement);
    });
}



// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –û–ë–™–ï–ö–¢–ê –ü–û ID
function loadObjectData() {
    // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const objectId = urlParams.get('id');
    
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    const objects = {
        '1': {
            title: '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç "–ó–µ–Ω–∏—Ç-–ï"',
            subtitle: '1970 ‚Ä¢ –ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥',
            description: '–ü–µ—Ä–≤—ã–π –º–∞—Å—Å–æ–≤—ã–π –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç –≤ –°–°–°–†. –í—ã–ø—É—Å–∫–∞–ª—Å—è –Ω–∞ –ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–æ–º –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–º –∑–∞–≤–æ–¥–µ —Å 1965 –ø–æ 1986 –≥–æ–¥.',
            specs: {
                production: '1965-1986',
                manufacturer: '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥',
                materials: '–ü–ª–∞—Å—Ç–∏–∫, –ú–µ—Ç–∞–ª–ª',
                category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
            },
            images: ['../icons/zenit.jpg']
        },
        '2': {
            title: '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ "–ó–ò–õ-–ú–æ—Å–∫–≤–∞"',
            subtitle: '1965 ‚Ä¢ –ó–∞–≤–æ–¥ –∏–º–µ–Ω–∏ –õ–∏—Ö–∞—á—ë–≤–∞',
            description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å–æ–≤–µ—Ç—Å–∫–∏–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, —Å–∏–º–≤–æ–ª —ç–ø–æ—Ö–∏. –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±—ã—Ç–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –≤ –°–°–°–†.',
            specs: {
                production: '1960-1970',
                manufacturer: '–ó–∞–≤–æ–¥ –∏–º–µ–Ω–∏ –õ–∏—Ö–∞—á—ë–≤–∞',
                materials: '–ú–µ—Ç–∞–ª–ª, –ü–ª–∞—Å—Ç–∏–∫, –†–µ–∑–∏–Ω–∞',
                category: '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞'
            },
            images: ['../icons/zil_moscow.jpg']
        },
        '3': {
            title: '"–ú–æ—Å–∫–≤–∏—á-412"',
            subtitle: '1970 ‚Ä¢ –ê–ó–õ–ö',
            description: '–°–æ–≤–µ—Ç—Å–∫–∏–π –ª–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º. –°–∏–º–≤–æ–ª –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–ø—Ä–æ–º–∞.',
            specs: {
                production: '1967-1976',
                manufacturer: '–ê–ó–õ–ö (–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ –∏–º–µ–Ω–∏ –õ–µ–Ω–∏–Ω—Å–∫–æ–≥–æ –∫–æ–º—Å–æ–º–æ–ª–∞)',
                materials: '–ú–µ—Ç–∞–ª–ª, –°—Ç–µ–∫–ª–æ, –ü–ª–∞—Å—Ç–∏–∫',
                category: '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏'
            },
            images: ['../icons/moskvich.jpg']
        },
        '4': {
            title: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä "–†–µ–∫–æ—Ä–¥ –í-312"',
            subtitle: '1975 ‚Ä¢ –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∏–π –∑–∞–≤–æ–¥',
            description: '–ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è. –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤ –≤ –°–°–°–†.',
            specs: {
                production: '1975-1985',
                manufacturer: '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∏–π –∑–∞–≤–æ–¥',
                materials: '–ü–ª–∞—Å—Ç–∏–∫, –°—Ç–µ–∫–ª–æ, –ú–µ—Ç–∞–ª–ª',
                category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
            },
            images: ['../icons/teliv_rek.jpg']
        },
        '5': {
            title: '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç "–§–≠–î-2"',
            subtitle: '1955 ‚Ä¢ –•–∞—Ä—å–∫–æ–≤—Å–∫–∏–π –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ –§–≠–î',
            description: '–î–∞–ª—å–Ω–æ–º–µ—Ä–Ω—ã–π —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç, –≤—ã–ø—É—Å–∫–∞–≤—à–∏–π—Å—è —Å 1955 –≥–æ–¥–∞ –Ω–∞ –•–∞—Ä—å–∫–æ–≤—Å–∫–æ–º –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–æ–¥–µ –§–≠–î. –Ø–≤–ª—è–ª—Å—è –∫–ª–æ–Ω–æ–º –Ω–µ–º–µ—Ü–∫–æ–≥–æ Leica II –∏ —Å—Ç–∞–ª –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ç–æ–∫–∞–º–µ—Ä –≤ –°–°–°–†.',
            specs: {
                production: '1955-1970',
                manufacturer: '–•–∞—Ä—å–∫–æ–≤—Å–∫–∏–π –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ –§–≠–î',
                materials: '–ú–µ—Ç–∞–ª–ª, –°—Ç–µ–∫–ª–æ, –ö–æ–∂–∞',
                category: '–§–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞'
            },
            images: ['../icons/fed2.jpg']
        },
        '6': {
            title: '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç "–°–º–µ–Ω–∞-8–ú"',
            subtitle: '1970 ‚Ä¢ –õ–û–ú–û',
            description: '–ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —à–∫–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–∫–∞–º–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤. –í—ã–ø—É—Å–∫–∞–ª–∞—Å—å –Ω–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–º –æ–ø—Ç–∏–∫–æ-–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ (–õ–û–ú–û) —Å 1970 –≥–æ–¥–∞.',
            specs: {
                production: '1970-1995',
                manufacturer: '–õ–û–ú–û (–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–µ –æ–ø—Ç–∏–∫–æ-–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)',
                materials: '–ü–ª–∞—Å—Ç–∏–∫, –°—Ç–µ–∫–ª–æ',
                category: '–§–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞'
            },
            images: ['../icons/smena8m.jpg']
        },
        '7': {
            title: '–í—Å–ø—ã—à–∫–∞ "–§–æ—Ç–æ–Ω"',
            ubtitle: '1975 ‚Ä¢ –ó–∞–≤–æ–¥ "–ö–≤–∞–Ω—Ç"',
            description: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≤—Å–ø—ã—à–∫–∞ –¥–ª—è –ª—é–±–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—ä–µ–º–∫–∏. –ü—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å –Ω–∞ –∑–∞–≤–æ–¥–µ "–ö–≤–∞–Ω—Ç" —Å 1975 –≥–æ–¥–∞.',
            specs: {
                production: '1975-1985',
                manufacturer: '–ó–∞–≤–æ–¥ "–ö–≤–∞–Ω—Ç"',
                materials: '–ü–ª–∞—Å—Ç–∏–∫, –ú–µ—Ç–∞–ª–ª',
                category: '–§–æ—Ç–æ–≤—Å–ø—ã—à–∫–∏'
            },
            images: ['../icons/foton.jpg']
        },
        '8': {
            title: '–†–∞–¥–∏–æ–ª–∞ "–í–µ–≥–∞-108"',
            subtitle: '1978 ‚Ä¢ –ë–µ—Ä–¥—Å–∫–∏–π —Ä–∞–¥–∏–æ–∑–∞–≤–æ–¥',
            description: '–¢—Ä–µ—Ö–ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–∞–¥–∏–æ–ª–∞ —Å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª–µ–º –≤–∏–Ω–∏–ª–æ–≤—ã—Ö –ø–ª–∞—Å—Ç–∏–Ω–æ–∫. –í—ã–ø—É—Å–∫–∞–ª–∞—Å—å –Ω–∞ –ë–µ—Ä–¥—Å–∫–æ–º —Ä–∞–¥–∏–æ–∑–∞–≤–æ–¥–µ —Å 1978 –≥–æ–¥–∞.',
            specs: {
                production: '1978-1985',
                manufacturer: '–ë–µ—Ä–¥—Å–∫–∏–π —Ä–∞–¥–∏–æ–∑–∞–≤–æ–¥',
                materials: '–î–µ—Ä–µ–≤–æ, –ü–ª–∞—Å—Ç–∏–∫, –ú–µ—Ç–∞–ª–ª',
                category: '–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞'
            },
            images: ['../icons/vega108.jpg']
        },
        '9': {
            title: '–ú–∞–≥–Ω–∏—Ç–æ—Ñ–æ–Ω "–í–µ—Å–Ω–∞-202"',
            subtitle: '1982 ‚Ä¢ –û—Ä–ª–æ–≤—Å–∫–∏–π —Ä–∞–¥–∏–æ–∑–∞–≤–æ–¥',
            description: '–ö–∞—Å—Å–µ—Ç–Ω—ã–π –º–∞–≥–Ω–∏—Ç–æ—Ñ–æ–Ω —Å –£–ö–í-–¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ–∫–∞—Å—Å–µ—Ç. –ü—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è –Ω–∞ –û—Ä–ª–æ–≤—Å–∫–æ–º –∑–∞–≤–æ–¥–µ —Å 1982 –≥–æ–¥–∞.',
            specs: {
                production: '1982-1990',
                manufacturer: '–û—Ä–ª–æ–≤—Å–∫–∏–π —Ä–∞–¥–∏–æ–∑–∞–≤–æ–¥',
                materials: '–ü–ª–∞—Å—Ç–∏–∫, –ú–µ—Ç–∞–ª–ª',
                category: '–ê—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞'
            },
            images: ['../icons/vesna.jpg']
        },
    };
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ ID –∏–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return objects[objectId] || objects['1'];
}


// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–†–ê–ù–ò–¶–´ –û–ë–™–ï–ö–¢–ê
function updateObjectPage() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ä–µ–∫—Ç–∞
    if (!document.querySelector('.object-detail')) return;
    
    const objectData = loadObjectData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const mainTitle = document.querySelector('.hero h1');
    const subtitle = document.querySelector('.hero h2');
    
    if (mainTitle) mainTitle.textContent = objectData.title;
    if (subtitle) subtitle.textContent = objectData.subtitle;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    const description = document.querySelector('.object-info-detailed p');
    if (description) description.textContent = objectData.description;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const specItems = document.querySelectorAll('.spec-item');
    if (specItems.length >= 4) {
        specItems[0].innerHTML = `<strong>–ì–æ–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong> ${objectData.specs.production}`;
        specItems[1].innerHTML = `<strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</strong> ${objectData.specs.manufacturer}`;
        specItems[2].innerHTML = `<strong>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</strong> ${objectData.specs.materials}`;
        specItems[3].innerHTML = `<strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${objectData.specs.category}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const mainImage = document.querySelector('.main-image');
    if (mainImage && objectData.images && objectData.images[0]) {
        mainImage.innerHTML = `<img src="${objectData.images[0]}" alt="${objectData.title}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 12px;">`;
    }
    
    console.log('–î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', objectData.title);
}

function shareObject() {
    const currentUrl = window.location.href;
    navigator.clipboard.writeText(currentUrl).then(() => {
        showNotification('–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const tempInput = document.createElement('input');
        tempInput.value = currentUrl;
        document.body.appendChild(tempInput);
        tempInput.select();
        document.execCommand('copy');
        document.body.removeChild(tempInput);
        showNotification('–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    });
}

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù
function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'block';
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

function closeAllModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.style.display = 'none';
    });
}

// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
function initializeAll() {
    normalizeHeaderHeight();
    initNavigation();
    initInteractiveElements();
    initLanguageSwitcher();
    initSmoothScrolling();
    initScrollAnimations();
    setupFormHandlers();
    setupModalHandlers();
    initImageHandlers(); // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ß–ö–£
    updateObjectPage();
    initCommunityPages();
    initAllAnimations();
    
    console.log('–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
function initNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');
    const dropdowns = document.querySelectorAll('.nav-item.dropdown');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            navLinks.forEach(l => l.classList.remove('active'));
            this.classList.add('active');
        });
    });
    
    dropdowns.forEach(dropdown => {
        dropdown.addEventListener('mouseenter', function() {
            const menu = this.querySelector('.dropdown-menu');
            if (menu) menu.style.display = 'block';
        });
        
        dropdown.addEventListener('mouseleave', function() {
            const menu = this.querySelector('.dropdown-menu');
            if (menu) menu.style.display = 'none';
        });
    });
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í
function initInteractiveElements() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    const cards = document.querySelectorAll('.feature-card, .object-card');
    cards.forEach(card => {
        card.addEventListener('click', function() {
            const link = this.querySelector('a');
            if (link) {
                window.location.href = link.href;
            }
        });
    });
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–Ø –Ø–ó–´–ö–ê
let currentLanguage = 'ru';

const translations = {
    'ru': {
        'events': '–°–æ–±—ã—Ç–∏—è',
        'archive': '–ê—Ä—Ö–∏–≤',
        'community': '–°–æ–æ–±—â–µ—Å—Ç–≤–æ',
        'career': '–ö–∞—Ä—å–µ—Ä–∞',
        'contacts': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        'webinars': '–í–µ–±–∏–Ω–∞—Ä—ã',
        'exhibitions': '–í—ã—Å—Ç–∞–≤–∫–∏',
        'competitions': '–ö–æ–Ω–∫—É—Ä—Å—ã',
        'conferences': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏',
        'objects': '–û–±—ä–µ–∫—Ç—ã',
        'collections': '–ö–æ–ª–ª–µ–∫—Ü–∏–∏',
        'authors': '–ê–≤—Ç–æ—Ä—ã',
        'timeline': '–¢–∞–π–º–ª–∞–π–Ω'
    },
    'en': {
        'events': 'Events',
        'archive': 'Archive',
        'community': 'Community',
        'career': 'Career',
        'contacts': 'Contacts',
        'webinars': 'Webinars',
        'exhibitions': 'Exhibitions',
        'competitions': 'Competitions',
        'conferences': 'Conferences',
        'objects': 'Objects',
        'collections': 'Collections',
        'authors': 'Authors',
        'timeline': 'Timeline'
    }
};

function toggleLanguage() {
    currentLanguage = currentLanguage === 'ru' ? 'en' : 'ru';
    updateLanguage();
}

function updateLanguage() {
    const languageBtn = document.querySelector('.language-btn');
    if (languageBtn) {
        languageBtn.textContent = currentLanguage === 'ru' ? 'RU' : 'EN';
    }
    
    const elements = document.querySelectorAll('[data-translate]');
    elements.forEach(element => {
        const key = element.getAttribute('data-translate');
        if (translations[currentLanguage][key]) {
            if (element.tagName === 'INPUT' && element.type !== 'submit') {
                element.placeholder = translations[currentLanguage][key];
            } else {
                element.textContent = translations[currentLanguage][key];
            }
        }
    });
    
    showNotification(`Language switched to ${currentLanguage.toUpperCase()}`, 'info');
}

function initLanguageSwitcher() {
    updateLanguage();
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–í–ù–û–ô –ü–†–û–ö–†–£–¢–ö–ò
function initSmoothScrolling() {
    const links = document.querySelectorAll('a[href^="#"]');
    
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ô –ü–†–ò –°–ö–†–û–õ–õ–ï
function initScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);
    
    const animatedElements = document.querySelectorAll('.feature-card, .object-card');
    animatedElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(20px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –§–û–†–ú
function setupFormHandlers() {
    const contactForm = document.getElementById('contactForm');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            handleContactForm(this);
        });
    }
    
    const eventForm = document.getElementById('eventForm');
    if (eventForm) {
        eventForm.addEventListener('submit', function(e) {
            e.preventDefault();
            handleEventForm(this);
        });
    }
    
    const jobForm = document.getElementById('jobForm');
    if (jobForm) {
        jobForm.addEventListener('submit', function(e) {
            e.preventDefault();
            handleJobForm(this);
        });
    }
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù
function setupModalHandlers() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.addEventListener('click', function(e) {
            if (e.target === this) {
                this.style.display = 'none';
            }
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeAllModals();
        }
    });
}



// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–û–†–ú
function handleContactForm(form) {
    const formData = {
        name: form.querySelector('#contactName').value,
        email: form.querySelector('#contactEmail').value,
        topic: form.querySelector('#contactTopic').value,
        message: form.querySelector('#contactMessage').value,
        timestamp: new Date().toLocaleString('ru-RU')
    };
    
    if (saveFormData('contact_submission', formData)) {
        showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
        form.reset();
    }
}

function handleEventForm(form) {
    const formData = {
        title: form.querySelector('#eventTitle').value,
        type: form.querySelector('#eventType').value,
        datetime: form.querySelector('#eventDateTime').value,
        description: form.querySelector('#eventDescription').value,
        timestamp: new Date().toLocaleString('ru-RU')
    };
    
    if (saveFormData('event_submission', formData)) {
        showNotification('–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', 'success');
        form.reset();
        closeModal('eventModal');
    }
}

function handleJobForm(form) {
    const formData = {
        title: form.querySelector('#jobTitle').value,
        company: form.querySelector('#jobCompany').value,
        salary: form.querySelector('#jobSalary').value,
        description: form.querySelector('#jobDescription').value,
        timestamp: new Date().toLocaleString('ru-RU')
    };
    
    if (saveFormData('job_submission', formData)) {
        showNotification('–í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!', 'success');
        form.reset();
        closeModal('jobModal');
    }
}

// –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –§–û–†–ú
function saveFormData(key, data) {
    try {
        const existingData = JSON.parse(localStorage.getItem(key) || '[]');
        existingData.push({
            ...data,
            id: Date.now(),
            timestamp: new Date().toISOString()
        });
        localStorage.setItem(key, JSON.stringify(existingData));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

function loadFormData(key) {
    try {
        return JSON.parse(localStorage.getItem(key)) || [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return [];
    }
}

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–†–•–ò–í–ê
function performArchiveSearch() {
    const searchInput = document.getElementById('archiveSearch');
    if (searchInput && searchInput.value.trim()) {
        const query = searchInput.value.trim();
        showNotification(`–ü–æ–∏—Å–∫: "${query}"`, 'info');
        filterObjects();
    }
}

function filterObjects() {
    const searchQuery = document.getElementById('archiveSearch')?.value.toLowerCase() || '';
    const periodCheckboxes = document.querySelectorAll('input[value][onchange*="filterObjects"]:checked');
    const categoryCheckboxes = document.querySelectorAll('input[value][onchange*="filterObjects"]:checked');
    const materialCheckboxes = document.querySelectorAll('input[value][onchange*="filterObjects"]:checked');
    
    const selectedPeriods = Array.from(periodCheckboxes).map(cb => cb.value);
    const selectedCategories = Array.from(categoryCheckboxes).map(cb => cb.value);
    const selectedMaterials = Array.from(materialCheckboxes).map(cb => cb.value);
    
    const cards = document.querySelectorAll('.object-card');
    let visibleCount = 0;
    
    cards.forEach(card => {
        const cardPeriod = card.getAttribute('data-period');
        const cardCategory = card.getAttribute('data-category');
        const cardMaterials = card.getAttribute('data-material').split(',');
        const cardTags = card.getAttribute('data-tags').toLowerCase();
        const cardText = card.textContent.toLowerCase();
        
        const matchesSearch = !searchQuery || 
                            cardText.includes(searchQuery) || 
                            cardTags.includes(searchQuery);
        
        const matchesPeriod = selectedPeriods.length === 0 || 
                            selectedPeriods.includes(cardPeriod);
        
        const matchesCategory = selectedCategories.length === 0 || 
                              selectedCategories.includes(cardCategory);
        
        const matchesMaterial = selectedMaterials.length === 0 || 
                              selectedMaterials.some(material => cardMaterials.includes(material));
        
        if (matchesSearch && matchesPeriod && matchesCategory && matchesMaterial) {
            card.style.display = 'block';
            visibleCount++;
        } else {
            card.style.display = 'none';
        }
    });
    
    showNotification(`–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${visibleCount}`, 'success');
}

function sortObjects(criteria) {
    const grid = document.getElementById('objectsGrid');
    if (!grid) return;
    
    const cards = Array.from(grid.querySelectorAll('.object-card'));
    
    cards.sort((a, b) => {
        switch(criteria) {
            case 'name':
                return a.querySelector('.object-name').textContent.localeCompare(b.querySelector('.object-name').textContent);
            case 'newest':
                return b.getAttribute('data-period').localeCompare(a.getAttribute('data-period'));
            case 'oldest':
                return a.getAttribute('data-period').localeCompare(b.getAttribute('data-period'));
            case 'popular':
                return Math.random() - 0.5;
            default:
                return 0;
        }
    });
    
    cards.forEach(card => grid.appendChild(card));
    
    const criteriaNames = {
        'newest': '–ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)',
        'oldest': '–ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)', 
        'name': '–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
        'popular': '–ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏'
    };
    showNotification(`–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${criteriaNames[criteria]}`, 'info');
}

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ë–´–¢–ò–ô
function registerForEvent(eventId) {
    showNotification('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!', 'success');
    
    const button = event.target;
    button.textContent = '‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω';
    button.disabled = true;
    button.classList.add('registered');
}

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–û–ë–©–ï–°–¢–í–ê
function showNewPostModal() {
    showModal('newPostModal');
}

function likePost(postId) {
    showNotification('–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
}

function commentOnPost(postId) {
    const comment = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
    if (comment) {
        showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
    }
}

function sharePost(postId) {
    showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'info');
}

function followExpert(expertId) {
    const btn = event.target;
    btn.textContent = '‚úì';
    btn.disabled = true;
    showNotification('–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞!', 'success');
}

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¨–ï–†–´
function switchCareerTab(tabName) {
    document.querySelectorAll('.career-tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.career-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    const targetContent = document.getElementById(tabName + '-content');
    const targetTab = event.target;
    
    if (targetContent) targetContent.classList.add('active');
    if (targetTab) targetTab.classList.add('active');
}

function showJobModal() {
    showModal('jobModal');
}

function applyForJob(jobId) {
    showNotification('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
}

function saveJob(jobId) {
    showNotification('–í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
}

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–§–ò–õ–Ø
function switchProfileTab(tabName) {
    document.querySelectorAll('.profile-tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.profile-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    const targetContent = document.getElementById(tabName + '-content');
    const targetTab = event.target;
    
    if (targetContent) targetContent.classList.add('active');
    if (targetTab) targetTab.classList.add('active');
}

function editProfile() {
    showModal('editProfileModal');
}

function saveProfile() {
    showNotification('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
    closeModal('editProfileModal');
}

function changeAvatar() {
    showNotification('–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–û–ù–¢–ê–ö–¢–û–í
function copyContactInfo(type, value) {
    navigator.clipboard.writeText(value).then(() => {
        showNotification(`${type} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`, 'success');
    });
}

function showOnMap() {
    showNotification('–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É...', 'info');
}

// –£–¢–ò–õ–ò–¢–´
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function throttle(func, limit) {
    let inThrottle;
    return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    }
}

// –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
function loadInitialData() {
    const contactSubmissions = loadFormData('contact_submission');
    const eventSubmissions = loadFormData('event_submission');
    const jobSubmissions = loadFormData('job_submission');
    
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        contactSubmissions,
        eventSubmissions, 
        jobSubmissions
    });
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´
document.addEventListener('DOMContentLoaded', function() {
    initializeAll();
    loadInitialData();
    
    const languageBtn = document.querySelector('.language-btn');
    if (languageBtn) {
        languageBtn.addEventListener('click', toggleLanguage);
    }
    
    const archiveSearch = document.getElementById('archiveSearch');
    if (archiveSearch) {
        archiveSearch.addEventListener('input', debounce(performArchiveSearch, 300));
    }
    
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –°–¢–†–ê–ù–ò–¶
window.showEventModal = function() {
    showModal('eventModal');
};

window.showJobModal = function() {
    showModal('jobModal');
};

window.showNewPostModal = function() {
    showModal('newPostModal');
};

window.closeModal = function(modalId) {
    closeModal(modalId);
};

window.registerForEvent = registerForEvent;
window.likePost = likePost;
window.commentOnPost = commentOnPost;
window.sharePost = sharePost;
window.followExpert = followExpert;
window.applyForJob = applyForJob;
window.saveJob = saveJob;
window.editProfile = editProfile;
window.saveProfile = saveProfile;
window.changeAvatar = changeAvatar;
window.copyContactInfo = copyContactInfo;
window.showOnMap = showOnMap;
window.performArchiveSearch = performArchiveSearch;
window.filterObjects = filterObjects;
window.sortObjects = sortObjects;
window.switchCareerTab = switchCareerTab;
window.switchProfileTab = switchProfileTab;


// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
function initImageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è feature images
    const featureImages = document.querySelectorAll('.feature-image');
    featureImages.forEach(img => {
        img.addEventListener('error', function() {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', this.src);
            this.style.display = 'none';
            const parent = this.closest('.feature-icon');
            if (parent) {
                parent.innerHTML = 'üìÅ';
                parent.style.fontSize = '32px';
                parent.style.display = 'flex';
                parent.style.alignItems = 'center';
                parent.style.justifyContent = 'center';
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è object images
    const objectImages = document.querySelectorAll('.object-img');
    objectImages.forEach(img => {
        img.addEventListener('error', function() {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:', this.src);
            this.style.display = 'none';
            const placeholder = this.nextElementSibling;
            if (placeholder && placeholder.classList.contains('image-placeholder')) {
                placeholder.style.position = 'relative';
                placeholder.style.background = 'linear-gradient(135deg, var(--aluminum) 0%, var(--light-gray) 100%)';
                placeholder.style.height = '100%';
                placeholder.style.display = 'flex';
                placeholder.style.alignItems = 'center';
                placeholder.style.justifyContent = 'center';
                placeholder.style.fontSize = '16px';
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        img.addEventListener('load', function() {
            const placeholder = this.nextElementSibling;
            if (placeholder && placeholder.classList.contains('image-placeholder')) {
                placeholder.style.display = 'block';
            }
        });
    });
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
const communityData = {
    // –§–æ—Ä—É–º—ã
    forums: [
        {
            id: 1,
            title: "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏",
            description: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
            threads: 24,
            lastActivity: "2024-01-15"
        },
        {
            id: 2, 
            title: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω",
            description: "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            threads: 18,
            lastActivity: "2024-01-14"
        }
    ],

    // –û–±—Å—É–∂–¥–µ–Ω–∏—è
    discussions: [
        {
            id: 1,
            forumId: 1,
            title: "–†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç–∞ –ó–µ–Ω–∏—Ç-–ï",
            author: "–ê–ª–µ–∫—Å–µ–π –†–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä",
            replies: 12,
            views: 156,
            lastPost: "2024-01-15"
        }
    ],

    // –ü—Ä–æ–µ–∫—Ç—ã
    projects: [
        {
            id: 1,
            title: "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–∞–≤–æ–¥–∞",
            description: "–°–æ–∑–¥–∞–Ω–∏–µ 3D –º–æ–¥–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è",
            status: "active",
            participants: 8,
            progress: 65
        }
    ],

    // –≠–∫—Å–ø–µ—Ä—Ç—ã
    experts: [
        {
            id: 1,
            name: "–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤",
            specialization: "–ò—Å—Ç–æ—Ä–∏–∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞",
            articles: 15,
            rating: 4.8
        }
    ],

    // –°—Ç–∞—Ç—å–∏
    articles: [
        {
            id: 1,
            title: "–≠–≤–æ–ª—é—Ü–∏—è —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞: –æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫ —ç—Å—Ç–µ—Ç–∏–∫–µ",
            authorId: 1,
            category: "history",
            readTime: "8 –º–∏–Ω",
            publishDate: "2024-01-10"
        }
    ]
};

function loadForumList() {
    const container = document.querySelector('.forum-list');
    if (!container) return;
    
    communityData.forums.forEach(forum => {
        const forumElement = document.createElement('div');
        forumElement.className = 'forum-item';
        forumElement.innerHTML = `
            <h3>${forum.title}</h3>
            <p>${forum.description}</p>
            <div class="forum-stats">
                <span>–¢–µ–º: ${forum.threads}</span>
                <span>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${forum.lastActivity}</span>
            </div>
        `;
        forumElement.addEventListener('click', () => {
            window.location.href = `forum-discussion.html?forumId=${forum.id}`;
        });
        container.appendChild(forumElement);
    });
}

function loadDiscussion() {
    const urlParams = new URLSearchParams(window.location.search);
    const discussionId = urlParams.get('id');
    
    if (discussionId) {
        const discussion = communityData.discussions.find(d => d.id == discussionId);
        if (discussion) {
            document.getElementById('discussion-title').textContent = discussion.title;
            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        }
    }
}






// –î–û–ë–ê–í–ò–¢–¨ –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê script.js

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
function initAdvancedAnimations() {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    const animatedElements = document.querySelectorAll('.feature-card, .object-card, .archive-item');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.animationPlayState = 'running';
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });
    
    animatedElements.forEach(el => {
        el.style.animation = 'fadeInUp 0.8s ease-out both';
        el.style.animationPlayState = 'paused';
        observer.observe(el);
    });
    
    // –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset;
        const parallaxElements = document.querySelectorAll('.shape, .dot, .gear');
        
        parallaxElements.forEach(el => {
            const speed = parseFloat(el.getAttribute('data-speed')) || 0.5;
            el.style.transform = `translateY(${scrolled * speed}px)`;
        });
    });
    
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ hover-—ç—Ñ—Ñ–µ–∫—Ç—ã
    const interactiveCards = document.querySelectorAll('.feature-card, .object-card');
    interactiveCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
            this.style.boxShadow = '0 20px 40px rgba(0,0,0,0.15)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(-5px) scale(1)';
            this.style.boxShadow = 'var(--hover-shadow)';
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
function getRandomAnimation() {
    const animations = ['float', 'floatHorizontal', 'pulseGlow'];
    return animations[Math.floor(Math.random() * animations.length)];
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    
    initAdvancedAnimations();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const backgroundElements = document.querySelectorAll('.shape, .dot, .line');
    backgroundElements.forEach(el => {
        const randomDelay = Math.random() * 5;
        const randomDuration = 10 + Math.random() * 10;
        
        el.style.animationDelay = `${randomDelay}s`;
        el.style.animationDuration = `${randomDuration}s`;
    });
});

// –î–û–ë–ê–í–ò–¢–¨ –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô script.js

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
function createAnimatedBackground() {
    const sections = document.querySelectorAll('.features, .archive-preview, .community-layout, .career-layout');
    
    sections.forEach(section => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        section.classList.add('animated-section-bg');
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        createFloatingElements(section);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
        const grid = document.createElement('div');
        grid.className = 'grid-pattern';
        section.appendChild(grid);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function createFloatingElements(container) {
    const elementCount = 8;
    
    for (let i = 0; i < elementCount; i++) {
        const element = document.createElement('div');
        const types = ['tech-line', 'tech-circle', 'tech-rectangle'];
        const type = types[Math.floor(Math.random() * types.length)];
        
        element.className = `content-float-element ${type}`;
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const size = Math.random() * 100 + 20;
        const top = Math.random() * 100;
        const left = Math.random() * 100;
        const delay = Math.random() * 10;
        const duration = 15 + Math.random() * 20;
        
        element.style.cssText = `
            top: ${top}%;
            left: ${left}%;
            animation-delay: ${delay}s;
            animation-duration: ${duration}s;
        `;
        
        if (type === 'tech-line') {
            element.style.width = `${size}px`;
            element.style.height = '2px';
        } else if (type === 'tech-circle') {
            element.style.width = `${size}px`;
            element.style.height = `${size}px`;
        } else if (type === 'tech-rectangle') {
            element.style.width = `${size}px`;
            element.style.height = `${size * 0.6}px`;
        }
        
        container.appendChild(element);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initContentAppearAnimations() {
    const elements = document.querySelectorAll('.feature-card, .object-card, .section-title, .content-appear');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
                if (entry.target.classList.contains('counter-animated')) {
                    animateCounter(entry.target);
                }
            }
        });
    }, { 
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    });
    
    elements.forEach((el, index) => {
        el.classList.add('content-appear', `delay-${(index % 4) + 1}`);
        observer.observe(el);
    });
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function animateCounter(element) {
    const target = parseInt(element.getAttribute('data-count') || element.textContent);
    const duration = 2000;
    const step = target / (duration / 16);
    let current = 0;
    
    const timer = setInterval(() => {
        current += step;
        if (current >= target) {
            element.textContent = target.toLocaleString();
            clearInterval(timer);
        } else {
            element.textContent = Math.floor(current).toLocaleString();
        }
    }, 16);
}

// –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç
function initParallaxEffects() {
    const parallaxElements = document.querySelectorAll('.content-float-element, .grid-pattern');
    
    window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset;
        
        parallaxElements.forEach(element => {
            const speed = element.getAttribute('data-speed') || 0.3;
            const yPos = -(scrolled * speed);
            element.style.transform = `translateY(${yPos}px)`;
        });
    });
}

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
function initInteractiveCards() {
    const cards = document.querySelectorAll('.feature-card, .object-card');
    
    cards.forEach(card => {
        // –ú–∞–≥–Ω–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        card.addEventListener('mousemove', (e) => {
            const rect = card.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            
            const angleX = (y - centerY) / 10;
            const angleY = (centerX - x) / 10;
            
            card.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg) scale(1.02)`;
        });
        
        card.addEventListener('mouseleave', () => {
            card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale(1)';
        });
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        card.addEventListener('mouseenter', () => {
            card.classList.add('interactive-highlight');
        });
        
        card.addEventListener('mouseleave', () => {
            card.classList.remove('interactive-highlight');
        });
    });
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function initLoadingProgress() {
    const loadingBar = document.createElement('div');
    loadingBar.className = 'loading-bar';
    document.body.appendChild(loadingBar);
    
    window.addEventListener('load', () => {
        loadingBar.style.width = '100%';
        setTimeout(() => {
            loadingBar.style.opacity = '0';
            setTimeout(() => loadingBar.remove(), 300);
        }, 500);
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
    let progress = 0;
    const progressInterval = setInterval(() => {
        progress += Math.random() * 10;
        if (progress > 90) clearInterval(progressInterval);
        loadingBar.style.width = `${progress}%`;
    }, 100);
}

// –°–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function initRandomAnimations() {
    const elements = document.querySelectorAll('.feature-icon, .object-image');
    
    elements.forEach(element => {
        const animations = ['bounce', 'pulse', 'wiggle'];
        const randomAnimation = animations[Math.floor(Math.random() * animations.length)];
        
        element.style.animation = `${randomAnimation} 3s ease-in-out infinite`;
        element.style.animationDelay = `${Math.random() * 2}s`;
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
function initAllAnimations() {
    createAnimatedBackground();
    initContentAppearAnimations();
    initParallaxEffects();
    initInteractiveCards();
    initLoadingProgress();
    initRandomAnimations();
    
    console.log('–í—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}